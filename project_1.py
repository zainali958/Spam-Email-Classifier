# -*- coding: utf-8 -*-
"""Project 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LizYyEswx6evBIuMDzPHLJA0-3OuRUj3

## **Libraries**
"""

import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from nltk.tokenize import word_tokenize
import string
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## **Download NLTK resources**"""

nltk.download('punkt')
nltk.download('stopwords')
nltk.download('punkt_tab')

"""## **Text Preprocessing Function**"""

def preprocess_text(text):
    text = str(text).lower()
    text = text.translate(str.maketrans('', '', string.punctuation))
    tokens = word_tokenize(text)
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words]
    stemmer = PorterStemmer()
    tokens = [stemmer.stem(word) for word in tokens]
    return ' '.join(tokens)

"""## **Load and Preprocess Data**"""

df = pd.read_csv("Spam Detection.csv")

"""## **Preprocess Text**"""

df['processed_text'] = df['Message'].apply(preprocess_text)

"""## **Visualization 1: Class Distribution**"""

plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='Category', palette='pastel')
plt.title('Distribution of Spam vs Ham')
plt.xlabel('Category')
plt.ylabel('Count')
plt.tight_layout()
plt.show()

"""## **Visualization 2: Most Frequent Word**"""

vectorizer_temp = CountVectorizer()
word_counts = vectorizer_temp.fit_transform(df['processed_text'])
word_freq = pd.DataFrame(word_counts.toarray(), columns=vectorizer_temp.get_feature_names_out())
top_words = word_freq.sum().sort_values(ascending=False).head(20)

plt.figure(figsize=(10, 6))
sns.barplot(x=top_words.values, y=top_words.index, palette='viridis')
plt.title('Top 20 Most Frequent Words')
plt.xlabel('Frequency')
plt.ylabel('Words')
plt.tight_layout()
plt.show()

"""## **Train/Test Split & Model**"""

X = df['processed_text']
y = df['Category']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

classifier = MultinomialNB()
classifier.fit(X_train_vec, y_train)

y_pred = classifier.predict(X_test_vec)

"""## **Visualization 3: Confusion Matrix**"""

cm = confusion_matrix(y_test, y_pred, labels=classifier.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classifier.classes_)
disp.plot(cmap='Blues')
plt.title('Confusion Matrix')
plt.tight_layout()
plt.show()

"""## **Accuracy**"""

print("Accuracy:", accuracy_score(y_test, y_pred))

"""## **Classify New Email**"""

new_emails = ["Free lottery ticket!", "Hello, can we schedule a call?"]
new_emails_processed = [preprocess_text(email) for email in new_emails]
new_emails_vec = vectorizer.transform(new_emails_processed)
predictions = classifier.predict(new_emails_vec)

for email, pred in zip(new_emails, predictions):
    print(f"Email: '{email}' is classified as: {pred}")